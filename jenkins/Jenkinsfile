pipeline {
    agent any
    
    tools {
        jdk '17' // or whatever JDK version you have configured in Jenkins
        gradle 'gradle' // or specify a specific Gradle version
    }
    
    environment {
        // Environment variables
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
        JAVA_OPTS = '-Xmx1024m'
        SPRING_PROFILES_ACTIVE = 'test'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out source code...'
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the project...'
                sh './gradlew clean build -x test'
            }
        }
        
        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                sh './gradlew test'
            }
            post {
                always {
                    // Publish test results
                    publishTestResults testResultsPattern: 'build/test-results/test/*.xml'
                    
                    // Publish JUnit test results
                    junit 'build/test-results/test/*.xml'
                }
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                sh './gradlew integrationTest'
            }
            post {
                always {
                    // Publish integration test results
                    publishTestResults testResultsPattern: 'build/test-results/integrationTest/*.xml'
                    junit 'build/test-results/integrationTest/*.xml'
                }
            }
        }
        
        stage('Code Coverage') {
            steps {
                echo 'Generating code coverage report...'
                sh './gradlew jacocoTestReport'
            }
            post {
                always {
                    // Publish code coverage report
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'build/reports/jacoco/test/html',
                        reportFiles: 'index.html',
                        reportName: 'Code Coverage Report'
                    ])
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                echo 'Running code quality checks...'
                sh './gradlew checkstyleMain checkstyleTest'
            }
            post {
                always {
                    // Publish checkstyle results
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'build/reports/checkstyle',
                        reportFiles: 'main.html',
                        reportName: 'Checkstyle Report'
                    ])
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'Running security scan...'
                sh './gradlew dependencyCheckAnalyze'
            }
            post {
                always {
                    // Publish security scan results
                    publishHTML([
                        allowMissing: false,
                        alwaysLinkToLastBuild: true,
                        keepAll: true,
                        reportDir: 'build/reports/dependency-check-report.html',
                        reportFiles: 'dependency-check-report.html',
                        reportName: 'Security Scan Report'
                    ])
                }
            }
        }
        
        stage('Package') {
            steps {
                echo 'Packaging the application...'
                sh './gradlew bootJar'
            }
        }
        
        stage('Docker Build') {
            when {
                branch 'main' // Only build Docker image for main branch
            }
            steps {
                echo 'Building Docker image...'
                script {
                    def image = docker.build("pokemon-api-proxy:${env.BUILD_NUMBER}")
                    docker.withRegistry('', 'docker-hub-credentials') {
                        image.push("latest")
                        image.push("${env.BUILD_NUMBER}")
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline completed!'
            
            // Clean up workspace
            cleanWs()
        }
        
        success {
            echo 'Pipeline succeeded!'
            
            // Send success notification
            emailext (
                subject: "✅ Build Success: Pokemon API Proxy - ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: """
                    <h2>Build Successful!</h2>
                    <p><strong>Project:</strong> Pokemon API Proxy</p>
                    <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                    <p><strong>Branch:</strong> ${env.BRANCH_NAME}</p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <p><strong>Console:</strong> <a href="${env.BUILD_URL}">View Build</a></p>
                    
                    <h3>Test Results:</h3>
                    <p>All tests passed successfully!</p>
                    
                    <h3>Next Steps:</h3>
                    <p>✅ Code is ready for review and merge</p>
                """,
                to: "${env.CHANGE_AUTHOR_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        failure {
            echo 'Pipeline failed!'
            
            // Send failure notification
            emailext (
                subject: "❌ Build Failed: Pokemon API Proxy - ${env.JOB_NAME} - ${env.BUILD_NUMBER}",
                body: """
                    <h2>Build Failed!</h2>
                    <p><strong>Project:</strong> Pokemon API Proxy</p>
                    <p><strong>Build:</strong> ${env.BUILD_NUMBER}</p>
                    <p><strong>Branch:</strong> ${env.BRANCH_NAME}</p>
                    <p><strong>Duration:</strong> ${currentBuild.durationString}</p>
                    <p><strong>Console:</strong> <a href="${env.BUILD_URL}">View Build</a></p>
                    
                    <h3>Please check the build logs for details.</h3>
                    
                    <h3>Common Issues:</h3>
                    <ul>
                        <li>Unit tests failing</li>
                        <li>Integration tests failing</li>
                        <li>Code quality issues</li>
                        <li>Security vulnerabilities</li>
                    </ul>
                """,
                to: "${env.CHANGE_AUTHOR_EMAIL}",
                mimeType: 'text/html'
            )
        }
        
        unstable {
            echo 'Pipeline unstable!'
        }
    }
}
